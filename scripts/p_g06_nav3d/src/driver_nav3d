#!/usr/bin/env python3
import argparse
import math
import time
import cv2
from cv_bridge import CvBridge
import numpy as np
import colorama
from operator import itemgetter
import rospy
import copy
from sensor_msgs.msg import Image, LaserScan, CameraInfo
from std_msgs.msg import Header, ColorRGBA, Float64
import tf2_geometry_msgs
import tf2_ros
from visualization_msgs.msg import Marker, MarkerArray
from geometry_msgs.msg import Twist, PoseStamped, Point, Pose, Vector3, Quaternion
from p_g06_sensors.msg import PlayerLocation


class Driver:
    def __init__(self):

        self.name = rospy.get_name()

        self.name = self.name.strip("/")
        idx = self.name.find("/", 0, len(self.name))

        self.name = self.name[0:idx]

        self.state = 0  # 0 - netrual, 1 - hunting, 2 - fleeing
        red_players = rospy.get_param("/red_players")
        blue_players = rospy.get_param("/blue_players")
        green_players = rospy.get_param("/green_players")

        if self.name in red_players:
            self.my_team, self.prey_team, self.hunter_team = "Red", "Green", "Blue"
            print(
                "My name is " + self.name + ". I am team " + colorama.Fore.RED + self.my_team + colorama.Style.RESET_ALL + ".\nI am hunting "
                + colorama.Fore.GREEN + str(
                    green_players) + colorama.Style.RESET_ALL + "\nand fleeing from " + colorama.Fore.BLUE
                + str(blue_players) + colorama.Style.RESET_ALL + ".")
        elif self.name in green_players:
            self.my_team, self.prey_team, self.hunter_team = "Green", "Blue", "Red"
            print(
                "My name is " + self.name + ". I am team " + colorama.Fore.GREEN + self.my_team + colorama.Style.RESET_ALL + ". I am hunting "
                + colorama.Fore.GREEN + str(
                    green_players) + colorama.Style.RESET_ALL + " and fleeing from " + colorama.Fore.BLUE
                + str(blue_players) + colorama.Style.RESET_ALL + ".")
        elif self.name in blue_players:
            self.my_team, self.prey_team, self.hunter_team = "Blue", "Red", "Green"
            print(
                "My name is " + self.name + ". I am team " + colorama.Fore.BLUE + self.my_team + colorama.Style.RESET_ALL + ". I am hunting "
                + colorama.Fore.RED + str(
                    red_players) + colorama.Style.RESET_ALL + " and fleeing from " + colorama.Fore.GREEN +
                str(green_players) + colorama.Style.RESET_ALL + ".")
        else:
            self.my_team, self.prey_team, self.hunter_team = "None", "All", "None"
            print(
                "My name is " + self.name + ". I am team " + colorama.Fore.YELLOW + self.my_team + colorama.Style.RESET_ALL + ". I am hunting "
                + colorama.Back.RED + "EVERYONE" + colorama.Style.RESET_ALL + " and fleeing from " + colorama.Back.RED +
                "NO ONE. HIDE FROM ME IF YOU CAN" + colorama.Style.RESET_ALL + ".")

        self.players = []

        self.goal = None

        self.angle = 0
        self.speed = 0

        # self.target = {"id": 0, "pixels": (0, 0), "points": PoseStamped(), "use_3d": False, "team": "None"}

        topic_location = "/" + self.name + '/player_location'
        topic_cmd_vel = "/" + self.name + '/cmd_vel'
        topic_camera = "/" + self.name + '/camera/rgb/camera_info'

        print("I'm subscribing to " + topic_location)
        print("I'm publishing to " + topic_cmd_vel)

        self.tf_buffer = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buffer)

        self.subscriber_camera = rospy.Subscriber(topic_camera, CameraInfo,
                                                  self.getCameraInfoCallback)  # Gets parameters from camera

        self.subscriber_player_location = rospy.Subscriber(topic_location, PlayerLocation,
                                                           self.getLocationCallback)  # Gets location from player_finder
        self.publisher_cmd_vel = rospy.Publisher(topic_cmd_vel, Twist, queue_size=10)

        self.timer = rospy.Timer(rospy.Duration(0.1), self.sendCommandCallback)

    def speed_correction(self, speed, angle):

        speed_ajusted = speed * (1 - ((6 * abs(angle))/math.pi))

        speed_ajusted = max(0, speed_ajusted)

        angle_ajusted = min(math.pi/2, angle)
        angle_ajusted = max(-math.pi/2, angle_ajusted)

        return speed_ajusted, angle_ajusted

    def sendCommandCallback(self, event):

        twist = Twist()

        twist.linear.x, twist.angular.z = self.speed_correction(self.speed, self.angle)

        print("linear: " + str(twist.linear.x) + "; angular: " + str(twist.angular.z))

        self.publisher_cmd_vel.publish(twist)

    def getCameraInfoCallback(self, msg):  # Gets the camera parameters from the robot's camera
        try:
            self.height = msg.height
            self.width = msg.width

            self.camera_info_exist = True

        except(tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException):
            self.camera_info_exist = False
            rospy.logerr("Could not get camera parameters.")

    def getLocationCallback(self, msg):
        self.players = []
        self.players_2d = []

        for i in msg.idx:

            player_3d_loc = self.tf_buffer.transform(msg.locations[i], self.name + "/odom", rospy.Duration(1))

            if msg.pose3D[i]:
                player = {"points": player_3d_loc, "pixels": None, "team": msg.teams[i], "area": None}

            else:
                player = {"points": None, "pixels": (msg.Xpixel[i], msg.Ypixel[i]), "team": msg.teams[i],
                          "area": msg.Area[i]}

            self.players.append(player)

        redefine = self.redefine_target(self.players)

        if redefine:
            print(colorama.Fore.RED + "Need to choose target" + colorama.Style.RESET_ALL)
            self.choose_target(self.players)

        if self.state == 1:
            # print("Hunting!!")
            self.drive_hunt(0.8)

        if self.state == 0:
            print("Stay still")
            self.drive_random()

        if self.state == 2:
            print("Running!!")
            self.drive_run()

    def redefine_target(self, players):
        redefine = False

        if self.state == 0:
            redefine = True

        if self.state == 1:

            goal = copy.deepcopy(self.goal)
            goal.header.stamp = rospy.Time.now()
            goal_in_baselink = self.tf_buffer.transform(goal, self.name + "/base_footprint", rospy.Duration(1))

            x = goal_in_baselink.pose.position.x
            y = goal_in_baselink.pose.position.y

            dist = math.sqrt(x**2 + y**2)

            close_player = False

            for player in players:
                if player["pixels"] is None and player["team"] == self.prey_team:
                    close_player = True

            if close_player:
                redefine = True

            if not close_player and dist <= 2:
                redefine = True

        if self.state == 2:
            stop_running = True
            for player in players:
                if player["pixels"] is None and player["team"] == self.hunter_team:
                    stop_running = False

            if stop_running:
                self.state = 0
                redefine = True

        return redefine

    def choose_target(self, players):
        prev_goal = copy.deepcopy(self.goal)
        self.goal = None
        target_3d = None
        target_2d = None

        dist_min = 1000
        area_max = 0

        for player in players:

            if player["pixels"] is None:
                if player["team"] == self.prey_team:

                    player_3d_pose = self.tf_buffer.transform(player["points"], self.name + "/odom", rospy.Duration(1))

                    x = player["points"].pose.position.x
                    y = player["points"].pose.position.y

                    dist = math.sqrt(x ** 2 + y ** 2)

                    if dist < dist_min:
                        target_3d = player_3d_pose
                        dist_min = dist

                if player["team"] == self.hunter_team:
                    print("Found near hunter!!!")
                    poseStamped = PoseStamped()
                    poseStamped.header.frame_id = self.name + "/base_footprint"
                    poseStamped.header.stamp = rospy.Time.now()

                    poseStamped.pose.position.x = -4
                    poseStamped.pose.position.y = 0

                    target_3d = self.tf_buffer.transform(poseStamped, self.name + "/odom", rospy.Duration(1))
                    dist_min = -1
                    self.state = 2

            if player["points"] is None:
                if player["team"] == self.prey_team and player["area"] > area_max:
                    area_max = player["area"]
                    target_2d = player["pixels"]

        if dist_min >= 0 and target_3d is not None:

            self.goal = target_3d
            self.state = 1

        elif dist_min >= 0 and target_3d is None and target_2d is not None:
            poseStamped = PoseStamped()
            poseStamped.header.frame_id = self.name + "/base_footprint"
            poseStamped.header.stamp = rospy.Time.now()

            x_pix = target_2d[0]
            k = math.pi / self.width

            error = (self.width / 2) - x_pix

            angle = k * error

            poseStamped.pose.position.x = 4 * math.cos(angle)
            poseStamped.pose.position.y = 4 * math.sin(angle)

            self.goal = self.tf_buffer.transform(poseStamped, self.name + "/odom", rospy.Duration(1))

            self.state = 1

        elif dist_min >= 0:
            print(target_3d)
            self.goal = prev_goal
            self.state = 0


    # if len(players_3d) > 0:
        #     dist_min = 1000
        #     for player_3d in players_3d:
        #         if player_3d["team"] == self.prey_team:
        #             player_3d_pose = player_3d["points"]
        #
        #             x = player_3d_pose.pose.position.x
        #             y = player_3d_pose.pose.position.y
        #
        #             dist = math.sqrt(x ** 2 + y ** 2)
        #
        #             if dist < dist_min:
        #                 target_3d = player_3d_pose
        #                 dist_min = dist
        #
        #         if player_3d["team"] == self.hunter_team:
        #             poseStamped = PoseStamped()
        #             poseStamped.header.frame_id = self.name + "/base_footprint"
        #             poseStamped.header.stamp = rospy.Time.now()
        #
        #             poseStamped.pose.position.x = -4
        #             poseStamped.pose.position.y = 0
        #
        #             self.goal = poseStamped
        #             self.state = 2
        #             break
        #
        #     if self.goal is None:
        #         self.goal = target_3d
        #         self.state = 1
        #
        # if len(players_2d) > 0 and self.goal is None:
        #
        #     area_max = 0
        #
        #     for player_2d in players_2d:
        #         if player_2d["team"] == self.prey_team and player_2d["area"] > area_max:
        #             area_max = player_2d["area"]
        #             target_2d = player_2d["pixels"]
        #
        #     poseStamped = PoseStamped()
        #     poseStamped.header.frame_id = self.name + "/base_footprint"
        #     poseStamped.header.stamp = rospy.Time.now()
        #
        #     x_pix = target_2d[0]
        #     k = math.pi / (10 * self.width)
        #
        #     error = (self.width / 2) - x_pix
        #
        #     angle = k * error
        #
        #     poseStamped.pose.position.x = 4 * math.cos(angle)
        #     poseStamped.pose.position.y = 4 * math.sin(angle)
        #
        #     self.goal = poseStamped
        #
        #     self.state = 1
        #
        # if self.goal is None:
        #     self.state = 0

    def drive_run(self):

        self.speed = 0.1
        self.angle = math.pi / 10

    def drive_hunt(self, max_speed):

        goal = copy.deepcopy(self.goal)
        goal.header.stamp = rospy.Time.now()
        goal_in_baselink = self.tf_buffer.transform(goal, self.name + "/base_footprint", rospy.Duration(1))

        x = goal_in_baselink.pose.position.x
        y = goal_in_baselink.pose.position.y

        # print("Going to (" + str(round(x, 2)) + "," + str(round(y, 2)) + ").")

        self.angle = math.atan2(y, x)

        self.speed = max_speed

    def drive_random(self):
        self.speed = 0
        self.angle = 0


def main():
    # ---------------------------------------------------
    # INITIALIZATION
    # ---------------------------------------------------

    rospy.init_node('Driver', anonymous=False)

    driver = Driver()

    rospy.spin()


if __name__ == '__main__':
    main()
