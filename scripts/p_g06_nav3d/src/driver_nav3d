#!/usr/bin/env python3
import argparse
import math
import time
import cv2
from cv_bridge import CvBridge
import numpy as np
import colorama
from operator import itemgetter
import rospy
import copy
from sensor_msgs.msg import Image, LaserScan, CameraInfo
from std_msgs.msg import Header, ColorRGBA
import tf2_geometry_msgs
import tf2_ros
from visualization_msgs.msg import Marker, MarkerArray
from geometry_msgs.msg import Twist, PoseStamped, Point, Pose, Vector3, Quaternion
from p_g06_sensors.msg import PlayerLocation


class Driver:
    def __init__(self):

        self.name = rospy.get_name()

        self.name = self.name.strip("/")
        idx = self.name.find("_", 0, len(self.name))

        self.name = self.name[0:idx]

        self.state = 0 # 0 - netrual, 1 - hunting, 2 - fleeing
        red_players = rospy.get_param("/red_players")
        blue_players = rospy.get_param("/blue_players")
        green_players = rospy.get_param("/green_players")

        if self.name in red_players:
            self.my_team, self.prey_team, self.hunter_team = "Red", "Green", "Blue"
            print("My name is " + self.name + ". I am team " + colorama.Fore.RED + self.my_team + colorama.Style.RESET_ALL + ".\nI am hunting "
                  + colorama.Fore.GREEN + str(green_players) + colorama.Style.RESET_ALL +"\nand fleeing from " + colorama.Fore.BLUE
                  + str(blue_players) + colorama.Style.RESET_ALL + ".")
        elif self.name in green_players:
            self.my_team, self.prey_team, self.hunter_team = "Green", "Blue", "Red"
            print("My name is " + self.name + ". I am team " + colorama.Fore.GREEN + self.my_team + colorama.Style.RESET_ALL + ". I am hunting "
                + colorama.Fore.GREEN + str(green_players) + colorama.Style.RESET_ALL + " and fleeing from " + colorama.Fore.BLUE
                  + str(blue_players) + colorama.Style.RESET_ALL + ".")
        elif self.name in blue_players:
            self.my_team, self.prey_team, self.hunter_team = "Blue", "Red", "Green"
            print("My name is " + self.name + ". I am team " + colorama.Fore.BLUE + self.my_team + colorama.Style.RESET_ALL + ". I am hunting "
                + colorama.Fore.RED + str(red_players) + colorama.Style.RESET_ALL + " and fleeing from " + colorama.Fore.GREEN +
                  str(green_players) + colorama.Style.RESET_ALL + ".")
        else:
            self.my_team, self.prey_team, self.hunter_team = "None", "All", "None"
            print("My name is " + self.name + ". I am team " + colorama.Fore.YELLOW + self.my_team + colorama.Style.RESET_ALL + ". I am hunting "
                + colorama.Back.RED + "EVERYONE" + colorama.Style.RESET_ALL + " and fleeing from " + colorama.Back.RED +
                "NO ONE. HIDE FROM ME IF YOU CAN" + colorama.Style.RESET_ALL + ".")

        self.players_3d = []
        self.players_2d = []

        self.target_3d = PoseStamped()
        self.target_2d = (0, 0)

        self.angle = 0
        self.speed = 0

        # self.target = {"id": 0, "pixels": (0, 0), "points": PoseStamped(), "use_3d": False, "team": "None"}

        topic_location = "/" + self.name + '/player_location'
        topic_cmd_vel = "/" + self.name + '/cmd_vel'
        topic_camera = "/" + self.name + '/camera/rgb/camera_info'

        print("I'm subscribing to " + topic_location)
        print("I'm publishing to " + topic_cmd_vel)

        self.tf_buffer = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buffer)

        self.subscriber_camera = rospy.Subscriber(topic_camera, CameraInfo, self.getCameraInfoCallback)  # Gets parameters from camera

        self.subscriber_player_location = rospy.Subscriber(topic_location, PlayerLocation, self.getLocationCallback)  # Gets location from player_finder
        self.publisher_cmd_vel = rospy.Publisher(topic_cmd_vel, Twist, queue_size=10)

        # self.timer = rospy.Timer(rospy.Duration(0.1), self.sendCommandCallback)

    def getCameraInfoCallback(self, msg): # Gets the camera parameters from the robot's camera
        try:
            self.height = msg.height
            self.width = msg.width

            self.camera_info_exist = True

        except(tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException):
            self.camera_info_exist = False
            rospy.logerr("Could not get camera parameters.")



    def getLocationCallback(self, msg):
        self.players_3d = []
        self.players_2d = []

        for i in msg.idx:
            player_3d_loc = self.tf_buffer.transform(msg.locations[i], self.name + "/odom", rospy.Duration(1))

            x = msg.locations[i].pose.position.x
            y = msg.locations[i].pose.position.y

            dist = math.sqrt(x ** 2 + y ** 2)

            if dist >= 0.001:
                object = {"points": player_3d_loc, "team": msg.teams[i]}
                self.players_3d.append(object)
            else:
                object = {"pixels": (msg.Xpixel[i], msg.Ypixel[i]), "team": msg.teams[i], "area": msg.Area[i]}
                self.players_2d.append(object)

        self.choose_target(self.players_3d, self.players_2d)

        if self.state == 1:
            # print("Hunting!!")
            self.drive_hunt()

        if self.state == 0:
            print("Stay still")
            self.drive_random()

        twist = Twist()
        twist.linear.x = self.speed
        twist.angular.z = self.angle

        print("linear: " + str(self.speed) + "\nangular: " + str(self.angle))

        # print(twist)
        self.publisher_cmd_vel.publish(twist)


    def choose_target(self, players_3d, players_2d):
        self.target_3d = None
        self.target_2d = None
        target_3d = None
        target_2d = None
        if len(players_3d) > 0:
            dist_min = 1000
            for player_3d in players_3d:
                if player_3d["team"] == self.prey_team:
                    player_3d_pose = player_3d["points"]

                    x = player_3d_pose.pose.position.x
                    y = player_3d_pose.pose.position.y

                    dist = math.sqrt(x ** 2 + y ** 2)

                    if dist < dist_min:
                        target_3d = player_3d_pose
                        dist_min = dist

            self.target_3d = target_3d
            self.state = 1
        elif len(players_2d) > 0:

            area_max = 0

            for player_2d in players_2d:
                if player_2d["team"] == self.prey_team and player_2d["area"] > area_max:
                    area_max = player_2d["area"]
                    target_2d = player_2d["pixels"]

            self.target_2d = target_2d
            self.state = 1
        else:
            self.state = 0

    def drive_hunt(self):

        if not (self.target_3d is None):
            goal = copy.deepcopy(self.target_3d)
            goal.header.stamp = rospy.Time.now()
            goal_in_baselink = self.tf_buffer.transform(goal, self.name + "/base_footprint", rospy.Duration(1))

            x = goal_in_baselink.pose.position.x
            y = goal_in_baselink.pose.position.y

            print("Going to (" + str(round(x, 2)) + "," + str(round(y, 2)) + ").")

            angle = math.atan2(y, x)

            self.speed, self.angle = self.linear_vs_angular(angle)

        elif not (self.target_2d is None):

            x_pix = self.target_2d[0]
            y_pix = self.target_2d[1]

            k = math.pi / (5 * self.width)

            error = self.width/2 - x_pix

            print("Error is " + str(error) + ".")
            angle = k * error

            self.speed, self.angle = self.linear_vs_angular(angle)

        else:
            self.speed = 0
            self.angle = 0


    def drive_random(self):
        self.speed = 0
        self.angle = 0

    def linear_vs_angular(self, angular):
        if angular >= 0:
            angular = min(angular, math.pi / 20)
        else:
            angular = - min(-angular, math.pi / 20)

        if abs(angular) <= 0.005:
            linear = 1
        else:
            linear = 0.8

        return linear, angular

def main():
    # ---------------------------------------------------
    # INITIALIZATION
    # ---------------------------------------------------

    rospy.init_node('Driver', anonymous=False)

    driver = Driver()


    rospy.spin()


if __name__ == '__main__':
    main()
