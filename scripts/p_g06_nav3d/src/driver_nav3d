#!/usr/bin/env python3
import argparse
import math
import time
import cv2
from cv_bridge import CvBridge
import numpy as np
import colorama
from operator import itemgetter
import rospy
import copy
from sensor_msgs.msg import Image, LaserScan, CameraInfo
from std_msgs.msg import Header, ColorRGBA
import tf2_geometry_msgs
import tf2_ros
from visualization_msgs.msg import Marker, MarkerArray
from geometry_msgs.msg import Twist, PoseStamped, Point, Pose, Vector3, Quaternion
from p_g06_sensors.msg import PlayerLocation


class Driver:
    def __init__(self):

        self.name = rospy.get_name()

        self.name = self.name.strip("/")
        idx = self.name.find("_", 0, len(self.name))

        self.name = self.name[0:idx]

        red_players = rospy.get_param("/red_players")
        blue_players = rospy.get_param("/blue_players")
        green_players = rospy.get_param("/green_players")

        if self.name in red_players:
            self.my_team, self.prey_team, self.hunter_team = "red", "green", "blue"
            print("My name is " + self.name + ". I am team " + colorama.Fore.RED + self.my_team + colorama.Style.RESET_ALL + ".\nI am hunting "
                  + colorama.Fore.GREEN + str(green_players) + colorama.Style.RESET_ALL +"\nand fleeing from " + colorama.Fore.BLUE
                  + str(blue_players) + colorama.Style.RESET_ALL + ".")
        elif self.name in green_players:
            self.my_team, self.prey_team, self.hunter_team = "green", "blue", "blue"
            print("My name is " + self.name + ". I am team " + colorama.Fore.GREEN + self.my_team + colorama.Style.RESET_ALL + ". I am hunting "
                + colorama.Fore.GREEN + str(green_players) + colorama.Style.RESET_ALL + " and fleeing from " + colorama.Fore.BLUE
                  + str(blue_players) + colorama.Style.RESET_ALL + ".")
        elif self.name in blue_players:
            self.my_team, self.prey_team, self.hunter_team = "blue", "red", "green"
            print("My name is " + self.name + ". I am team " + colorama.Fore.BLUE + self.my_team + colorama.Style.RESET_ALL + ". I am hunting "
                + colorama.Fore.RED + str(red_players) + colorama.Style.RESET_ALL + " and fleeing from " + colorama.Fore.GREEN +
                  str(green_players) + colorama.Style.RESET_ALL + ".")
        else:
            self.my_team, self.prey_team, self.hunter_team = "None", "All", "None"
            print("My name is " + self.name + ". I am team " + colorama.Fore.YELLOW + self.my_team + colorama.Style.RESET_ALL + ". I am hunting "
                + colorama.Back.RED + "EVERYONE" + colorama.Style.RESET_ALL + " and fleeing from " + colorama.Fore.GREEN +
                "NO ONE. HIDE FROM ME IF YOU CAN" + colorama.Style.RESET_ALL + ".")

        self.players = []

        self.angle = 0
        self.speed = 0

        self.target = {}

        topic_location = "/" + self.name + '/player_location'
        topic_cmd_vel = "/" + self.name + '/cmd_vel'
        topic_camera = "/" + self.name + '/camera/rgb/camera_info'

        print("I'm subscribing to " + topic_location)
        print("I'm publishing to " + topic_cmd_vel)

        self.tf_buffer = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buffer)

        self.subscriber_camera = rospy.Subscriber(topic_camera, CameraInfo, self.getCameraInfoCallback)  # Gets parameters from camera

        self.subscriber_player_location = rospy.Subscriber(topic_location, PlayerLocation, self.getLocationCallback)  # Gets location from player_finder
        self.publisher_cmd_vel = rospy.Publisher(topic_cmd_vel, Twist, queue_size=10)

        self.timer = rospy.Timer(rospy.Duration(0.1), self.sendCommandCallback)

    def getCameraInfoCallback(self, msg): # Gets the camera parameters from the robot's camera
        try:
            self.height = msg.height
            self.width = msg.width

            self.camera_info_exist = True

        except(tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException):
            self.camera_info_exist = False
            rospy.logerr("Could not get camera parameters.")



    def getLocationCallback(self, msg):
        self.players = []
        for i in msg.idx:
            player_3d_loc = self.tf_buffer.transform(msg.locations[i], self.name + "/odom", rospy.Duration(1))

            x = msg.locations[i].pose.position.x
            y = msg.locations[i].pose.position.y

            dist = math.sqrt(x ** 2 + y ** 2)

            if dist >= 0.001:
                use = True
            else:
                use = False

            object = {"id": i, "pixels": (msg.Xpixel[i], msg.Ypixel[i]), "points": player_3d_loc,"use_3d": use,"team": msg.teams[i]}
            self.players.append(object)

        # print(self.players[0])
        # print(self.players)


    def choose_target(self, players):
        is_3d_pose = True

        if len(self.players) > 0:
            self.target = self.players[0]

        if len(self.target) > 0:
            target_copy = copy.deepcopy(self.target)

            target_3d_loc = self.tf_buffer.transform(target_copy["points"], self.name + "/base_footprint", rospy.Duration(1))

            x = target_3d_loc.pose.position.x
            y = target_3d_loc.pose.position.y


            x_pix = target_copy["pixels"][0]
            y_pix = target_copy["pixels"][1]

            if target_copy["use_3d"]:
                self.angle = math.atan2(y, x)
                self.speed = 1

                print("Moving to (" + str(round(x, 2)) + "," + str(round(y, 2)) + ") in relation to the player, using sensors")
            else:
                error = x_pix - self.width/2

                print("Moving to (" + str(round(x_pix, 0)) + "," + str(round(y_pix, 0)) + ") in relation to the player, using camera")

                k = 2*math.pi/self.width

                self.angle = k * error
                self.speed = 0.5


    def sendCommandCallback(self, event):

        self.choose_target(self.players)

        twist = Twist()
        twist.linear.x = self.speed
        twist.angular.z = self.angle

        # print("linear: " + str(self.speed) + "\nangular: " + str(self.angle))

        # print(twist)
        self.publisher_cmd_vel.publish(twist)


def main():
    # ---------------------------------------------------
    # INITIALIZATION
    # ---------------------------------------------------

    rospy.init_node('Driver', anonymous=False)

    driver = Driver()


    rospy.spin()


if __name__ == '__main__':
    main()
