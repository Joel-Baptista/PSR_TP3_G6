#!/usr/bin/env python3
import argparse
import math
import time
import cv2
from cv_bridge import CvBridge
import numpy as np
import colorama
from operator import itemgetter
import rospy
import copy
from sensor_msgs.msg import Image, LaserScan, CameraInfo
from std_msgs.msg import Header, ColorRGBA, Float64
import tf2_geometry_msgs
import tf2_ros
from visualization_msgs.msg import Marker, MarkerArray
from geometry_msgs.msg import Twist, PoseStamped, Point, Pose, Vector3, Quaternion
from p_g06_sensors.msg import PlayerLocation, ObstacleLocation
from random import randint

class Driver:
    def __init__(self):

        self.name = rospy.get_name()

        self.name = self.name.strip("/")
        idx = self.name.find("/", 0, len(self.name))

        self.name = self.name[0:idx]

        self.state = 0  # 0 - netrual, 1 - hunting, 2 - fleeing; 3 - avoid wall; 4 - find exit
        red_players = rospy.get_param("/red_players")
        blue_players = rospy.get_param("/blue_players")
        green_players = rospy.get_param("/green_players")

        if self.name in red_players:
            self.my_team, self.prey_team, self.hunter_team = "Red", "Green", "Blue"
            print(
                "My name is " + self.name + ". I am team " + colorama.Fore.RED + self.my_team + colorama.Style.RESET_ALL + ".\nI am hunting "
                + colorama.Fore.GREEN + str(
                    green_players) + colorama.Style.RESET_ALL + "\nand fleeing from " + colorama.Fore.BLUE
                + str(blue_players) + colorama.Style.RESET_ALL + ".")
        elif self.name in green_players:
            self.my_team, self.prey_team, self.hunter_team = "Green", "Blue", "Red"
            print(
                "My name is " + self.name + ". I am team " + colorama.Fore.GREEN + self.my_team + colorama.Style.RESET_ALL + ". I am hunting "
                + colorama.Fore.GREEN + str(
                    green_players) + colorama.Style.RESET_ALL + " and fleeing from " + colorama.Fore.BLUE
                + str(blue_players) + colorama.Style.RESET_ALL + ".")
        elif self.name in blue_players:
            self.my_team, self.prey_team, self.hunter_team = "Blue", "Red", "Green"
            print(
                "My name is " + self.name + ". I am team " + colorama.Fore.BLUE + self.my_team + colorama.Style.RESET_ALL + ". I am hunting "
                + colorama.Fore.RED + str(
                    red_players) + colorama.Style.RESET_ALL + " and fleeing from " + colorama.Fore.GREEN +
                str(green_players) + colorama.Style.RESET_ALL + ".")
        else:
            self.my_team, self.prey_team, self.hunter_team = "None", "All", "None"
            print(
                "My name is " + self.name + ". I am team " + colorama.Fore.YELLOW + self.my_team + colorama.Style.RESET_ALL + ". I am hunting "
                + colorama.Back.RED + "EVERYONE" + colorama.Style.RESET_ALL + " and fleeing from " + colorama.Back.RED +
                "NO ONE. HIDE FROM ME IF YOU CAN" + colorama.Style.RESET_ALL + ".")

        self.players = []

        self.goal = None
        self.goal_exit = None
        self.closest_obstacle_point = None
        self.closest_obstacle_dist = 10000
        self.closest_mate = None
        self.obstacle_points = None
        self.obstacle_ref = None


        self.angle = 0
        self.speed = 0

        # self.target = {"id": 0, "pixels": (0, 0), "points": PoseStamped(), "use_3d": False, "team": "None"}

        topic_player_location = "/" + self.name + '/player_location'
        topic_obstacle_location = "/" + self.name + '/obstacles_location'
        topic_cmd_vel = "/" + self.name + '/cmd_vel'
        topic_camera = "/" + self.name + '/camera/rgb/camera_info'

        print("I'm subscribing to " + topic_player_location)
        print("I'm publishing to " + topic_cmd_vel)

        self.tf_buffer = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buffer)

        self.subscriber_camera = rospy.Subscriber(topic_camera, CameraInfo,
                                                  self.getCameraInfoCallback)  # Gets parameters from camera

        self.subscriber_player_location = rospy.Subscriber(topic_player_location, PlayerLocation,
                                                           self.getPlayerLocationCallback)  # Gets location from player_finder

        self.subscriber_obstacle_location = rospy.Subscriber(topic_obstacle_location, ObstacleLocation,
                                                             self.getObstacleLocationCallback)  # Gets location from player_finder
        self.publisher_cmd_vel = rospy.Publisher(topic_cmd_vel, Twist, queue_size=10)

        self.timer = rospy.Timer(rospy.Duration(0.1), self.sendCommandCallback)

    # <==========================================================================================================>
    # <---------------------------------------------------------------------------------------------------------->
    # <------------------------------------COMMUNICATION FUNCTIONS----------------------------------------------->
    # <---------------------------------------------------------------------------------------------------------->
    # <==========================================================================================================>

    def sendCommandCallback(self, event):

        twist = Twist()

        if not (self.goal is None):
            self.drive_straight()

        twist.linear.x, twist.angular.z = self.speed_correction(self.speed, self.angle)

        print("linear: " + str(twist.linear.x) + "; angular: " + str(twist.angular.z))

        self.publisher_cmd_vel.publish(twist)

    def getCameraInfoCallback(self, msg):  # Gets the camera parameters from the robot's camera
        try:
            self.height = msg.height
            self.width = msg.width

            self.camera_info_exist = True

        except(tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException):
            self.camera_info_exist = False
            rospy.logerr("Could not get camera parameters.")

    def getPlayerLocationCallback(self, msg):

        self.players = []

        for i in msg.idx:

            player_3d_loc = self.tf_buffer.transform(msg.locations[i], self.name + "/odom", rospy.Duration(1))

            if msg.pose3D[i]:
                player = {"points": player_3d_loc, "pixels": None, "team": msg.teams[i], "area": None}

            else:
                player = {"points": None, "pixels": (msg.Xpixel[i], msg.Ypixel[i]), "team": msg.teams[i],
                          "area": msg.Area[i]}

            self.players.append(player)

        if not (self.goal is None):
            self.need_new_goal()

        # if not(self.goal_exit is None):
        #     self.need_new_goal_exit()
        #     print("Need new exit")
        #
        # if self.goal_exit is None:
        #     self.find_exit(self.obstacle_points)

        self.choose_state(self.players)
        print(self.state)

        if self.state == 0 and self.goal is None:
            print("Need new goal")
            self.target_neutral()

        if self.state == 1 and self.goal is None:
            print("Need new goal")
            self.target_hunt(self.players)

        if self.state == 2 and self.goal is None:
            print("Need new goal")
            self.target_flee(self.players)

        if self.state == 3 and self.goal is None:
            print("Need new goal")
            self.target_avoid_wall(self.players)

        if self.state == 4 and self.goal is None:
            print("AVOIDING!!!")
            self.target_avoid_mate(self.players)

    def getObstacleLocationCallback(self, msg):

        self.obstacle_points = msg.obstacles_points
        self.closest_obstacle_point = msg.closest_point
        self.closest_obstacle_dist = msg.closest_dist
        self.obstacle_ref = msg.referencial

    # <==========================================================================================================>
    # <---------------------------------------------------------------------------------------------------------->
    # <--------------------------------------------STATE FUNCTIONS----------------------------------------------->
    # <---------------------------------------------------------------------------------------------------------->
    # <==========================================================================================================>

    def choose_state(self, players):

        state_prev = self.state

        closest_mate = None

        near_mate = False
        near_prey = False
        far_prey = False
        near_hunter = False
        far_hunter = False
        near_wall = False
        state = 0
        max_area_norm = 0
        dist_min_mate = 1000

        if self.closest_obstacle_dist <= 0.8:
            near_wall = True

        for player in players:
            if player["team"] == self.prey_team and player["pixels"] is None:
                near_prey = True

            if player["team"] == self.prey_team and player["points"] is None:
                far_prey = True

            if player["team"] == self.hunter_team and player["pixels"] is None:
                near_hunter = True

            if player["team"] == self.hunter_team and player["points"] is None:
                far_hunter = True
                area_norm = (100 * player["area"]) / (self.width * self.height)

                if area_norm > max_area_norm:
                    max_area_norm = area_norm

            if player["team"] == self.my_team and player["pixels"] is None:
                near_mate = True

                x = player["points"].pose.position.x
                y = player["points"].pose.position.y

                dist = math.sqrt(x ** 2 + y ** 2)

                if dist < dist_min_mate:
                    closest_mate = player["points"]
                    dist_min_mate = dist

        self.closest_mate = closest_mate


        if (near_prey or far_prey):  # if there are preys but not near hunters
            state = 1

        if near_hunter:  # there are near hunters
            state = 2

        if not (near_prey or far_prey) and far_hunter and max_area_norm >= 0.1:  # There are only hunters
            state = 2

        if not near_prey and not far_prey and near_wall:
            state = 3

        if near_mate:  # To avoid mate collision
            state = 4
            print(self.name + ' avoiding mate COLLISION')

        if state_prev == 2 and state == 0 and not (self.goal is None):  # Keep fleeing even if not seeing hunters
            self.state = state_prev
        elif state_prev == 1 and state == 0 and not (self.goal is None):  # Keep hunting even if not seeing preys
            self.state = state_prev
        else:
            self.state = state

        if state_prev != self.state:
            self.goal = None

        if self.state == 1 and near_prey:
            self.goal = None

        # if self.state == 3:
        #     self.goal = None

    def need_new_goal(self, thresh_dist=1.5):
        goal_copy = copy.deepcopy(self.goal)
        goal_copy.header.stamp = rospy.Time.now()

        goal_in_base_link = self.tf_buffer.transform(goal_copy, self.name + "/base_footprint", rospy.Duration(1))

        x = goal_in_base_link.pose.position.x
        y = goal_in_base_link.pose.position.y

        dist = math.sqrt(x ** 2 + y ** 2)

        if dist <= thresh_dist:
            self.goal = None

    # def need_new_goal_exit(self, thresh_dist=0.5):
    #     goal_copy = copy.deepcopy(self.goal_exit)
    #     goal_copy.header.stamp = rospy.Time.now()
    #
    #     goal_in_base_link = self.tf_buffer.transform(goal_copy, self.name + "/base_footprint", rospy.Duration(1))
    #
    #     x = goal_in_base_link.pose.position.x
    #     y = goal_in_base_link.pose.position.y
    #
    #     dist = math.sqrt(x ** 2 + y ** 2)
    #
    #     if dist <= thresh_dist:
    #         self.goal_exit = None

    # <==========================================================================================================>
    # <---------------------------------------------------------------------------------------------------------->
    # <-------------------------------------------TARGET FUNCTIONS----------------------------------------------->
    # <---------------------------------------------------------------------------------------------------------->
    # <==========================================================================================================>

    def target_avoid_wall(self, players):

        poseStamped = PoseStamped()
        poseStamped.header.frame_id = self.name + "/base_footprint"
        poseStamped.header.stamp = rospy.Time.now()

        wall_closest = copy.deepcopy(self.closest_obstacle_point)

        wall_closest_in_base_link = self.tf_buffer.transform(wall_closest, self.name + "/base_footprint",
                                                             rospy.Duration(1))
        x = wall_closest_in_base_link.pose.position.x
        y = wall_closest_in_base_link.pose.position.y


        angle = math.atan2(y, x)
        # sign = angle/abs(angle)
        # new_angle = angle + sign * 2 * math.pi/3

        if abs(angle) < math.pi/5:
            k = 1
        else:
            k = 1/2

        if angle < 0:
            new_angle = math.pi * k + angle
        else:
            new_angle = math.pi * k - angle

        poseStamped.pose.position.x = 2 * math.cos(new_angle)
        poseStamped.pose.position.y = 2 * math.sin(new_angle)
        self.goal = self.tf_buffer.transform(poseStamped, self.name + "/odom", rospy.Duration(1))


    def target_neutral(self):
        poseStamped = PoseStamped()
        poseStamped.header.frame_id = self.name + "/base_footprint"
        poseStamped.header.stamp = rospy.Time.now()

        # goal_exit = copy.deepcopy(self.goal_exit)
        #
        # x = 2
        # y = 0
        #
        # print(self.goal_exit)
        # goal_exit = self.tf_buffer.transform(self.goal_exit, self.name + "/base_footprint", rospy.Duration(1))
        # print(goal_exit)

        poseStamped.pose.position.x = -1
        poseStamped.pose.position.y = 2 * randint(-1, 1)

        self.goal = self.tf_buffer.transform(poseStamped, self.name + "/odom", rospy.Duration(1))

    def target_avoid_mate(self, players):

        poseStamped = PoseStamped()
        poseStamped.header.frame_id = self.name + "/base_footprint"
        poseStamped.header.stamp = rospy.Time.now()

        x = self.closest_mate.pose.position.x
        y = self.closest_mate.pose.position.y

        if y < 0:
            new_angle = math.pi / 3
        else:
            new_angle = - math.pi / 3

        dist = math.sqrt(x ** 2 + y ** 2)
        print('TEAMATE WITHIN' + str(dist))

        if dist < 0.5:
            new_angle = math.pi

        poseStamped.pose.position.x = 2 * math.cos(new_angle)
        poseStamped.pose.position.y = 2 * math.sin(new_angle)
        self.goal = self.tf_buffer.transform(poseStamped, self.name + "/odom", rospy.Duration(1))

    def target_flee(self, players):
        poseStamped = PoseStamped()
        poseStamped.header.frame_id = self.name + "/base_footprint"
        poseStamped.header.stamp = rospy.Time.now()

        poseStamped.pose.position.x = -1.7
        poseStamped.pose.position.y = 0

        self.goal = self.tf_buffer.transform(poseStamped, self.name + "/odom", rospy.Duration(1))

    def target_hunt(self, players):
        near_prey = False
        target = None
        dist_min = 1000
        area_max = 0

        for player in players:
            if player["team"] == self.prey_team:
                if player["pixels"] is None:

                    near_prey = True

                    pose = player["points"]
                    pose_in_baselink = self.tf_buffer.transform(pose, self.name + "/base_footprint", rospy.Duration(1))

                    x = pose_in_baselink.pose.position.x
                    y = pose_in_baselink.pose.position.y

                    dist = math.sqrt(x ** 2 + y ** 2)

                    if dist < dist_min:
                        dist_min = dist
                        target = pose

                if player["points"] is None and not near_prey:

                    if player["area"] > area_max:
                        area_max = player["area"]
                        poseStamped = PoseStamped()
                        poseStamped.header.frame_id = self.name + "/base_footprint"
                        poseStamped.header.stamp = rospy.Time.now()

                        x_pix = player["pixels"][0]
                        k = 0.3 * math.pi / self.width

                        error = (self.width / 2) - x_pix

                        angle = k * error

                        poseStamped.pose.position.x = 3 * math.cos(angle)
                        poseStamped.pose.position.y = 3 * math.sin(angle)

                        target = self.tf_buffer.transform(poseStamped, self.name + "/odom", rospy.Duration(1))

        self.goal = target

    # def find_exit(self, obstacle_points):
    #     goal_exit = None
    #     y_mean = None
    #     x_mean = None
    #     x_prev = 0
    #     y_prev = 0
    #
    #     for i, point in enumerate(obstacle_points.poses):
    #
    #         x = point.position.x
    #         y = point.position.y
    #
    #         if i > 0:
    #
    #             dist = math.sqrt((x_prev - x) ** 2 + (y_prev - y) ** 2)
    #
    #             if 0.5 <= dist <= 3:
    #                 x_mean = (x + x_prev) / 2
    #                 y_mean = (y + y_prev) / 2
    #
    #         x_prev = x
    #         y_prev = y
    #
    #     if x_mean is not None:
    #
    #         poseStamped = PoseStamped()
    #         poseStamped.header = Header(stamp=rospy.Time.now(), frame_id=self.name + "/odom")
    #
    #         poseStamped.pose.position.x = x_mean
    #         poseStamped.pose.position.y = y_mean
    #
    #         goal_exit = poseStamped
    #
    #     self.goal = goal_exit

    # <==========================================================================================================>
    # <---------------------------------------------------------------------------------------------------------->
    # <--------------------------------------------DRIVE FUNCTIONS----------------------------------------------->
    # <---------------------------------------------------------------------------------------------------------->
    # <==========================================================================================================>

    def speed_correction(self, speed, angle):

        angle_ajusted = min(math.pi / 4, angle)
        angle_ajusted = max(-math.pi / 4, angle_ajusted)

        angle_ajusted = math.floor(100 * angle_ajusted) / 100

        if speed != 0:

            sign = speed / abs(speed)

            speed_ajusted = abs(speed) * (1 - ((3 * abs(angle_ajusted)) / math.pi))

            # speed_ajusted = speed

            speed_ajusted = sign * max(0, speed_ajusted)

            speed_ajusted = math.floor(10 * speed_ajusted) / 10
        else:
            speed_ajusted = 0

        return speed_ajusted, angle_ajusted

    def drive_straight(self, max_speed=1.0):
        goal_copy = copy.deepcopy(self.goal)
        goal_copy.header.stamp = rospy.Time.now()

        goal_in_base_link = self.tf_buffer.transform(goal_copy, self.name + "/base_footprint", rospy.Duration(1))

        x = goal_in_base_link.pose.position.x
        y = goal_in_base_link.pose.position.y

        # print("Going to " + str((x, y)))

        dist = math.sqrt(x ** 2 + y ** 2)

        self.angle = math.atan2(y, x)

        if self.state == 0 or self.state == 3:
            max_speed = 0.5

        if self.state == 1 and dist <= 1.5:
            max_speed = 0.6

        if abs(self.angle) > math.pi/4:
            drive_back = -1
        else:
            drive_back = 1

        # self.speed = max_speed

        self.speed = drive_back * max_speed


def main():
    # ---------------------------------------------------
    # INITIALIZATION
    # ---------------------------------------------------

    rospy.init_node('Driver', anonymous=False)

    driver = Driver()

    rospy.spin()


if __name__ == '__main__':
    main()
