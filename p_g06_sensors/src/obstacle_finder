#!/usr/bin/env python3
import argparse
import math
import time
import cv2
import rosparam
from cv_bridge import CvBridge
import numpy as np
import colorama
from operator import itemgetter
import rospy
import copy
from sensor_msgs.msg import Image, LaserScan, CameraInfo
from std_msgs.msg import Header, ColorRGBA, Float32MultiArray
import tf2_geometry_msgs
import tf2_ros
from visualization_msgs.msg import Marker, MarkerArray
from geometry_msgs.msg import Twist, PoseStamped, Point, PoseArray, Vector3, Quaternion
from p_g06_sensors.msg import PlayerLocation


class Lidar:
    def __init__(self):
        # <==============================================================>
        # <================ VARIABLE INITIATION =========================>
        # <==============================================================>

        # <-------------------LIDAR 2D VARIABLES------------------------->

        self.LidarPoints = []
        self.Lidar_object_points = []
        self.obstacle_points = []

        # <-------------------COMMUNICATION VARIABLES-------------------->

        self.name = rospy.get_name()

        self.name = self.name.strip("/")

        idx = self.name.find("/", 0, len(self.name))

        self.name = self.name[0:idx]
        print("My player name is " + self.name)

        topic_laser = "/" + self.name + '/scan'
        topic_obstacles = "/" + self.name + '/obstacles'
        topic_marker = "/" + self.name + '/markers'

        print("I'm subscribing to " + topic_laser)
        print("I'm publishing to " + topic_obstacles)
        print("I'm publishing to " + topic_marker)

        # <==============================================================>
        # <================ COMMUNICATION INITIATION ====================>
        # <==============================================================>

        # <-------------------SUBSCRIBERS INITIATION--------------------->
        # Subscribes to needed topics to retrieve necessary information

        self.subscriber_laser = rospy.Subscriber(topic_laser, LaserScan,
                                                 self.getLaserCallback)  # Gets points from laser


        # <-------------------PUBLISHERS INITIATION--------------------->
        # Publishes information to topics
        self.publisher_location = rospy.Publisher(topic_obstacles, PoseArray,
                                                  queue_size=10)  # Publishes markers to rviz to ensure that the data is correct
        self.publisher_markers = rospy.Publisher(topic_marker, MarkerArray,
                                                 queue_size=10)  # Publishes markers to rviz to ensure that the data is correct
        # self.timer = rospy.Timer(rospy.Duration(0.1), self.sendMarkersCallback)
        # self.timer_object_detection = rospy.Timer(rospy.Duration(0.1), self.object_detection())
        # <-------------------TF_LISTENER INITIATION--------------------->
        # Initiates frames' transform listener in order easily transform data from one frame from another frame

        self.tf_buffer = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buffer)

    # <==========================================================================================================>
    # <---------------------------------------------------------------------------------------------------------->
    # <------------------------------------COMMUNICATION FUNCTIONS----------------------------------------------->
    # <---------------------------------------------------------------------------------------------------------->
    # <==========================================================================================================>

    def sendMarkersCallback(self, Objects):
        markers_array = MarkerArray()
        marker = Marker()


        for object in Objects:
            for point in object:
                x = point[0]
                y = point[1]
                z = point[2]



    def getLaserCallback(self, laser):  # Gets Lidar 2D points from the robot's sensor
        self.LidarPoints = []

        for i, range in enumerate(laser.ranges):
            theta = laser.angle_min + laser.angle_increment * i
            if not math.isinf(range):
                # The if statement limits the angle of the Lidar 2D point that will be analised (angles can be changed if needed)

                poseStamped = PoseStamped()
                point = Point()

                poseStamped.header.stamp = rospy.Time.now()
                poseStamped.header.frame_id = self.name + "/base_scan"

                point.x = range * math.cos(theta)
                point.y = range * math.sin(theta)
                point.z = 0

                poseStamped.pose.position = point

                self.LidarPoints.append(poseStamped)

        points_list = self.lidar_object_detection()
        print(len(points_list))
        # print(points_list[0].shape[0])

        self.obstacle_detection(points_list)
        print(self.obstacle_points)
        self.sendMarkersCallback(self.obstacle_points)

    def obstacle_detection(self, points_list, thresh=10, ):
        self.obstacle_points = []
        obstacles_points = []

        points_len = 0

        for points in points_list:

            if points.shape[0] >= thresh:
                obstacles_points.append(points)
                points_len += points.shape[0]

        idx = 0
        obstacle_points = np.zeros(points_len, 3)

        for object in obstacles_points:
            for point in object:
                x = point[0]
                y = point[1]
                z = point[2]

                vector_lidarPoint = np.array([x, y, z])

                obstacle_points[idx] = vector_lidarPoint
                idx += 1

        self.obstacle_points = obstacle_points

    # <==========================================================================================================>
    # <---------------------------------------------------------------------------------------------------------->
    # <------------------------------------OBJECT DETECTION FUNCTIONS-------------------------------------------->
    # <---------------------------------------------------------------------------------------------------------->
    # <==========================================================================================================>

    def lidar_object_detection(self):
        x_prev = 1000
        y_prev = 1000

        tresh = 0.2

        points_list = []
        array_points = np.empty((0, 3), float)

        for i, lidar_point in enumerate(self.LidarPoints):
            x = lidar_point.pose.position.x
            y = lidar_point.pose.position.y
            z = lidar_point.pose.position.z

            dist = math.sqrt((x - x_prev) ** 2 + (y - y_prev) ** 2)

            if dist > tresh:
                if i > 0:
                    points_list.append(array_points)

                array_points = np.empty((0, 3), float)

            array_points = np.append(array_points, np.array([[x, y, z]]), axis=0)
            x_prev = x
            y_prev = y

        points_list.append(array_points)

        return points_list


def main():
    # ---------------------------------------------------
    # INITIALIZATION
    # ---------------------------------------------------

    rospy.init_node('Lidar', anonymous=False)

    lidar = Lidar()

    rospy.spin()


if __name__ == '__main__':
    main()
